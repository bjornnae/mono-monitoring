program mono.run;
mo = load mono.mono;
mu = load mono.utils;
mp = load mono.parse;
em = load mono.emitters;
log = load mono.logging;

/* This is the mono entry point. 
 * Start this and the monitoring solution will roll on 
 * until the process running this script is terminated.
 *  
 * Place the site specific setup in the file monitor-setup.yeti.
 *  
 */

    config  = [
        // If no other config is found, the config for _base will be used.
        {id = "_base", defaultTTL = 10, defaultState = "ok"}, 
        {id = "bndlaptoptestService", defaultTTL = 10, defaultState = "ok"}
    ];
    
    consumers = [
            {name = "detect-heartbeat-1", 	  
            id = "bndlaptoptestService", 
            triggerOn = do ev : case  ev of TTLHeartbeatMissed n: true; _: false; esac; done, 
            actOn = do evRec : ( 
                    mo.evLogAppend (mp.makeEv (mo.getCurrentTime () / 1000) "monointernal" ".testService.missingHeart" 
                        "loopAfterTTL" "Search party for missing heartbeat." [
                        ["name" : "loopcount", "value" : "1"]] [""] 100);
                    println "<ACTION:\(name)> Missing heart. Activate search party until found again.";)
                    done;  },
                    
            {name = "detect-stay-in-state-1", id = "bndlaptoptestService", 
                triggerOn = do ev: case  ev of DefaultStateLeave n: true; _: false; esac; done, 
                actOn = do evRec: em.toLog ((utils.getProperties "mono.properties") "mono.outpout.rssFile" ) (em.rssStr "PrimaveraReporting" "Deviation."); done;  },
                
            {name = "detect-stay-in-state-2", id = "bndlaptoptestService", 
                triggerOn = do ev: case  ev of DefaultStateJoin n: true; _: false; esac; done, 
                actOn = do evRec: println "<ACTION:\(name)> Returning to OK State."; done;  },
        ];

log.setLogLevel 0;
log.logDebug "monorun" "Starting loop forever.";
var i = 0;
pollWait = (mu.getProperties (mo.getPropertyfile ()))["mono.pollwait.seconds"] |> number ;
                
true loop (
    var loopSuccess = false;
    log.logDebug "monorun"  "Step \(i)";
    try
        mo.monitorNewStateReportMessages config consumers;
        loopSuccess := true;
    catch java.io.IOException ex:
        loopSuccess := false;
        log.logWarn "monorun"  "IO error happened: \(ex)";
    finally
        if not loopSuccess then log.logError "monorun" "An unhandled exception occured."
        else ()
        fi
    yrt;
    i := i + 1;
    sleep pollWait;
    )

  