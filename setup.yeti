program mono.setup;
mo = load mono.monoagent;
utils = load mono.utils;
mp = load mono.parse;
em = load mono.emitters;
me = load mono.events;
run = load mono.run;
common = load mono.common;

/* This is the mono agent configuration point and the program entry point. 
 * Start this script and the monitoring solution will roll on 
 * until the process running this script is terminated.
 *  
 * Here we define two things: config and consumers.
 */
 
 /** 

This is also the class that is used for launching 
the application when it is packaged into a jar file. 
the manifest file which is added to the jar archive in order to make it complete need to point to this class with the line:

    Main-Class: mono.JarRunner

*/

	// If no other config is found, the config for _base will be used.


    serviceConfig = [
        {id = "_base", defaultTTL = 10, defaultState = "ok"}, 
        {id = "bndlaptoptestService", defaultTTL = 10, defaultState = "ok"},
		{id = "bndlaptoptestService.beat", defaultTTL = 10, defaultState = "ok"}
    ];
    
    consumers = [
     		// This consumer generates a heartbeat checkpoint.
            {name = "detect-missing-heartbeat-1", 	  
            id = "bndlaptoptestService", 
            triggerOn = do ev : case  ev of TTLHeartbeatMissed n: true; _: false; esac; done, 
            actOn = do evRec : ( 
						// Check if a service with same name and .beat added as suffix exist otherwise create it with this or default TTL.
						// A companying consumer (in this case bndlaptoptestService.beat) will take care of the publishing.
						// This is to avoid that missing heartbeat is generated every time the poller runs.
						currentStateIndex = utils.makeIndex (mp.parseLogLines(mp.getLogLines ((common.getProperties ( common.getPropertyfile () ))["mono.db.indexfile"]) ));
						// First pass: only generate this message if beat is missing or state of beat is stale.
						//Otherwise we will generate a lot of messages and reset the ttl repeatedly.
						if not ((id ^ ".beat") in currentStateIndex.dbindex) or (currentStateIndex.dbindex[id ^ ".beat"].state == "stale") then ( 
							mo.evLogAppend (mp.stateLogObjectToJSON (mp.makeEv (mo.getCurrentTime () / 1000) "bndlaptop" "testService.beat" 
								"fail" "Search party for missing heartbeat." [] [""] (me.getIdxFromConfig serviceConfig "bndlaptoptestService").defaultTTL ));
							utils.logDebug "mono.setup.consumers" "<ACTION:\(name)> Missing heart. Activate search party until found again.";
						) fi;
					)
                    done;  
			},
                    
			// This consumer produces a message every time the default state (set in config variable above) is deviated from.		
            {name = "detect-stay-in-state-1", id = "bndlaptoptestService", 
                triggerOn = do ev: case  ev of DefaultStateLeave n: true; _: false; esac; done, 
                actOn = do evRec: em.toLog ((common.getProperties  (common.getPropertyfile ()))["mono.output.rssFile"] ) 
                                            (em.rssStr "testServiceReporting" "Warning: Deviation from default state.");
						done;  
			},
			
			// This consumer produces a message every time the log message goes from a deviating state back to the desireable state.
            {name = "detect-stay-in-state-2", id = "bndlaptoptestService", 
                triggerOn = do ev: case  ev of DefaultStateJoin n: true; _: false; esac; done, 
                actOn = do evRec: em.toLog ((common.getProperties  (common.getPropertyfile ()))["mono.output.rssFile"] )  
											(em.rssStr "testServiceReporting" "Info: Return to default state.");
						done;  
			},
            
			// Heartbeat: finding it.	
            {name = "heartbeatFind-1", id = "bndlaptoptestService", 
                triggerOn = do ev: case  ev of  DefaultStateLeave n: true; 
												DefaultStateStay n: true;
												DefaultStateOff n: true;
												DefaultStateJoin n: true;
												_ : false; 
									esac; 
							done, 
                actOn = do evRec: mo.evLogAppend (mp.stateLogObjectToJSON (mp.makeEv (mo.getCurrentTime () / 1000) "bndlaptop" "testService.beat" 
										"stale" "Search party found beat." [] [""] 0 )); 
						done;
				},

			// Heartbeat: not finding it: generate a message once and resetting.
            {name = "detect-missing-heartbeat-2", id = "bndlaptoptestService.beat", 
                triggerOn = do ev : case  ev of TTLHeartbeatMissed n: true; _: false; esac; done, 
                actOn = do evRec: 
								mo.evLogAppend (mp.stateLogObjectToJSON (mp.makeEv (mo.getCurrentTime () / 1000) "bndlaptop" "testService.beat" 
									"stale" "Search party is missing beat." [] [""] 0 )); 
								em.toLog ((common.getProperties  (common.getPropertyfile ()))["mono.output.rssFile"] ) 
									( em.rssStr "testServiceReporting" "Warning: Missing heartbeat.");
						done;
				},
        ];
	
// Start the monitoring agent.				
run.runArgs serviceConfig consumers;
				
				
